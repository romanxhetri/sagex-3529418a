
import React, { useState, useEffect } from "react";
import { Header } from "@/components/Header";
import { motion } from "framer-motion";
import { GameCard } from "@/components/games/GameCard";
import { TicTacToe } from "@/components/games/TicTacToe";
import { ChessGame } from "@/components/games/ChessGame";
import { Button } from "@/components/ui/button";
import { GameChat } from "@/components/games/GameChat";
import { Gamepad2, ChevronRight, Trophy, Gift, Crown } from "lucide-react";

const Games = () => {
  const [currentGame, setCurrentGame] = useState<string | null>(null);
  const [showIntro, setShowIntro] = useState(true);
  const [points, setPoints] = useState(() => {
    const savedPoints = localStorage.getItem('gamePoints');
    return savedPoints ? parseInt(savedPoints) : 0;
  });
  
  useEffect(() => {
    // Save points to localStorage
    localStorage.setItem('gamePoints', points.toString());
  }, [points]);

  const addPoints = (amount: number) => {
    setPoints(prev => prev + amount);
  };
  
  const games = [
    {
      id: "tictactoe",
      name: "Tic Tac Toe",
      description: "The classic game of X's and O's, now with AI opponent!",
      image: "/placeholder.svg",
      difficulty: "Easy",
      aiPowered: true
    },
    {
      id: "chess",
      name: "Chess",
      description: "Challenge the AI to a game of chess - multiple difficulty levels!",
      image: "/placeholder.svg",
      difficulty: "Hard",
      aiPowered: true
    },
    {
      id: "memory",
      name: "Memory Match",
      description: "Test your memory by matching pairs of cards. Beat the clock!",
      image: "/placeholder.svg",
      difficulty: "Medium",
      aiPowered: false
    },
    {
      id: "puzzle",
      name: "AI Puzzle",
      description: "Solve challenging puzzles generated by AI. New puzzles daily!",
      image: "/placeholder.svg", 
      difficulty: "Variable",
      aiPowered: true
    }
  ];
  
  const renderGame = () => {
    switch(currentGame) {
      case "tictactoe":
        return <TicTacToe onGameComplete={() => addPoints(10)} />;
      case "chess":
        return <ChessGame onGameComplete={() => addPoints(25)} />;
      default:
        return (
          <div className="flex flex-col items-center justify-center h-96 bg-glass-dark backdrop-blur-lg border border-glass-border rounded-lg p-8 text-center">
            <Gamepad2 className="text-purple-400 mb-4" size={48} />
            <h3 className="text-2xl font-bold mb-2">Game Coming Soon!</h3>
            <p className="text-gray-400 mb-6">This game is still in development. Check back soon!</p>
            <Button onClick={() => setCurrentGame(null)} variant="outline">
              Browse Other Games
            </Button>
          </div>
        );
    }
  };
  
  return (
    <div className="min-h-screen bg-black text-white overflow-hidden">
      <Header />
      
      <main className="container mx-auto px-4 pt-24 pb-16">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="max-w-6xl mx-auto"
        >
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl md:text-4xl font-bold">
                <span className="inline-block mr-2">ðŸŽ®</span>
                SageX Gaming Portal
              </h1>
              <p className="text-gray-400 mt-2">
                Challenge your mind with AI-powered games
              </p>
            </div>
            
            <div className="flex items-center bg-glass-dark backdrop-blur-lg border border-glass-border rounded-lg py-2 px-4">
              <Trophy className="text-yellow-400 mr-2" size={20} />
              <span className="text-white font-bold">{points} Points</span>
            </div>
          </div>
          
          {currentGame ? (
            <>
              <div className="flex items-center mb-4">
                <Button 
                  variant="ghost" 
                  onClick={() => setCurrentGame(null)}
                  className="text-gray-400 hover:text-white"
                >
                  Games
                </Button>
                <ChevronRight className="mx-2 text-gray-600" size={16} />
                <span className="text-white">
                  {games.find(g => g.id === currentGame)?.name}
                </span>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                  {renderGame()}
                </div>
                
                <div className="space-y-6">
                  <div className="bg-glass-dark backdrop-blur-lg border border-glass-border rounded-lg overflow-hidden">
                    <div className="p-4 border-b border-glass-border">
                      <h3 className="text-lg font-medium flex items-center">
                        <Crown className="text-yellow-400 mr-2" size={20} />
                        Game Assistant
                      </h3>
                    </div>
                    <div className="p-4">
                      <GameChat gameId={currentGame} />
                    </div>
                  </div>
                  
                  <div className="bg-glass-dark backdrop-blur-lg border border-glass-border rounded-lg overflow-hidden">
                    <div className="p-4 border-b border-glass-border">
                      <h3 className="text-lg font-medium flex items-center">
                        <Gift className="text-purple-400 mr-2" size={20} />
                        Rewards
                      </h3>
                    </div>
                    <div className="p-4">
                      <ul className="space-y-3">
                        <li className="flex justify-between items-center">
                          <span>Win a game</span>
                          <span className="font-bold text-yellow-400">+10 pts</span>
                        </li>
                        <li className="flex justify-between items-center">
                          <span>Beat hard AI</span>
                          <span className="font-bold text-yellow-400">+25 pts</span>
                        </li>
                        <li className="flex justify-between items-center">
                          <span>Daily streak</span>
                          <span className="font-bold text-yellow-400">+5 pts</span>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {games.map(game => (
                <GameCard 
                  key={game.id}
                  game={game}
                  onClick={() => setCurrentGame(game.id)}
                />
              ))}
            </div>
          )}
        </motion.div>
      </main>
    </div>
  );
};

export default Games;
